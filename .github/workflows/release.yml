---
name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Mark as a pre-release'
        required: true
        default: false
        type: boolean
      draft:
        description: 'Create as a draft release'
        required: true
        default: false
        type: boolean
      generateReleaseNotes:
        description: 'Automatically generate release notes from commits'
        required: true
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  release:
    name: ðŸš€ Create and Build Release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.release_info.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run Gradle Release
        run: |
          ./gradlew release -Prelease.incrementer=increment${{ inputs.version_type }}

      - name: Get release tag info
        id: release_info
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          echo "tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "Release tag created: $latest_tag"

      - name: Checkout release tag for building artifacts
        run: git checkout ${{ steps.release_info.outputs.tag }}

      - name: Set dynamic versionCode
        run: echo "VERSION_CODE=$(git rev-list --count HEAD)" >> $GITHUB_ENV

      - name: Decode Keystore and Setup Signing
        id: setup_signing
        env:
          SIGNING_KEY_STORE_BASE64: ${{ secrets.SIGNING_KEY_STORE_BASE64 }}
        run: |
          KEYSTORE_PATH=${{ runner.temp }}/keystore.jks
          echo $SIGNING_KEY_STORE_BASE64 | base64 --decode > $KEYSTORE_PATH
          echo "keyStorePath=$KEYSTORE_PATH" >> $GITHUB_OUTPUT

      - name: Build Release App Bundle and APK
        env:
          SIGNING_KEY_STORE_PATH: ${{ steps.setup_signing.outputs.keyStorePath }}
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
          VERSION_CODE: ${{ env.VERSION_CODE }}
        run: ./gradlew clean bundleRelease assembleRelease

      - name: Upload Artifacts for Release Job
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: '**/build/outputs/**/release/*.*'
          retention-days: 1

  publish-release:
    name: ðŸ“¦ Publish GitHub Release
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: artifacts

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: 'artifacts/**/*.*'
          tag: ${{ needs.release.outputs.tag }}
          name: "Release ${{ needs.release.outputs.tag }}"
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}
          generateReleaseNotes: ${{ github.event.inputs.generateReleaseNotes }}

