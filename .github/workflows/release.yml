---
name: Release Android App

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Mark as a pre-release'
        required: true
        default: false
        type: boolean
      draft:
        description: 'Create as a draft release'
        required: true
        default: false
        type: boolean
      generateReleaseNotes:
        description: 'Automatically generate release notes from commits'
        required: true
        default: true
        type: boolean
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  id-token: write
  packages: write

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  validate:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-cleanup: true

      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

      - name: Run tests
        if: ${{ !inputs.skip_tests }}
        run: ./gradlew test testReleaseUnitTest --continue

      - name: Run lint checks
        run: ./gradlew lintRelease

      - name: Upload test results
        if: failure() && !inputs.skip_tests
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: '**/build/test-results/**/*.xml'
          retention-days: 7

  release:
    name: 🚀 Create and Build Release
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 30
    outputs:
      tag: ${{ steps.release_info.outputs.tag }}
      version_name: ${{ steps.release_info.outputs.version_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-cleanup: true

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run Gradle Release
        run: |
          ./gradlew release -Prelease.incrementer=increment${{ inputs.version_type }}

      - name: Get release tag info
        id: release_info
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          version_name=${latest_tag#v}  # Remove 'v' prefix if present
          echo "tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "version_name=$version_name" >> $GITHUB_OUTPUT
          echo "Release tag created: $latest_tag"
          echo "Version name: $version_name"

      - name: Checkout release tag for building artifacts
        run: git checkout ${{ steps.release_info.outputs.tag }}

      - name: Set build environment variables
        run: |
          echo "VERSION_CODE=$(git rev-list --count HEAD)" >> $GITHUB_ENV
          echo "VERSION_NAME=${{ steps.release_info.outputs.version_name }}" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

      - name: Cache keystore
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/keystore.jks
          key: keystore-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Decode and setup keystore
        id: setup_signing
        env:
          SIGNING_KEY_STORE_BASE64: ${{ secrets.SIGNING_KEY_STORE_BASE64 }}
        run: |
          KEYSTORE_PATH=${{ runner.temp }}/keystore.jks
          if [ ! -f "$KEYSTORE_PATH" ]; then
            echo "Decoding keystore..."
            echo $SIGNING_KEY_STORE_BASE64 | base64 --decode > $KEYSTORE_PATH
          fi
          echo "keyStorePath=$KEYSTORE_PATH" >> $GITHUB_OUTPUT

      - name: Build Release App Bundle and APK
        env:
          SIGNING_KEY_STORE_PATH: ${{ steps.setup_signing.outputs.keyStorePath }}
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
          VERSION_CODE: ${{ env.VERSION_CODE }}
          VERSION_NAME: ${{ env.VERSION_NAME }}
        run: |
          echo "Building release with:"
          echo "  Version Code: $VERSION_CODE"
          echo "  Version Name: $VERSION_NAME"
          echo "  Build Time: $BUILD_TIME"
          ./gradlew clean bundleRelease assembleRelease --no-daemon

      - name: Generate checksums
        run: |
          find . -name "*.apk" -o -name "*.aab" | while read file; do
            echo "$(sha256sum "$file" | cut -d' ' -f1)  $(basename "$file")" >> checksums.txt
          done
          echo "Generated checksums:"
          cat checksums.txt

      - name: Verify APK signature
        run: |
          APK_PATH=$(find . -name "*-release.apk" | head -1)
          if [ -n "$APK_PATH" ]; then
            echo "Verifying APK signature: $APK_PATH"
            $ANDROID_HOME/build-tools/*/apksigner verify --verbose "$APK_PATH"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ steps.release_info.outputs.tag }}
          path: |
            **/build/outputs/apk/release/*.apk
            **/build/outputs/bundle/release/*.aab
            checksums.txt
          retention-days: 30

      - name: Upload mapping files
        uses: actions/upload-artifact@v4
        with:
          name: mapping-files-${{ steps.release_info.outputs.tag }}
          path: '**/build/outputs/mapping/release/mapping.txt'
          retention-days: 90

  publish-release:
    name: 📦 Publish GitHub Release
    runs-on: ubuntu-latest
    needs: release
    timeout-minutes: 10

    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.release.outputs.tag }}
          path: artifacts

      - name: Prepare release assets
        run: |
          cd artifacts
          # Rename files with version for clarity
          for file in $(find . -name "*.apk" -o -name "*.aab"); do
            ext="${file##*.}"
            base="$(basename "$file" ".$ext")"
            new_name="${base}-${{ needs.release.outputs.tag }}.${ext}"
            mv "$file" "$new_name"
            echo "Renamed: $file -> $new_name"
          done
          
          echo "Release assets:"
          ls -la

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: |
            artifacts/*.apk
            artifacts/*.aab
            artifacts/checksums.txt
          tag: ${{ needs.release.outputs.tag }}
          name: "Release ${{ needs.release.outputs.tag }}"
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}
          generateReleaseNotes: ${{ github.event.inputs.generateReleaseNotes }}
          body: |
            ## 🎉 Release ${{ needs.release.outputs.tag }}
            
            **Version:** ${{ needs.release.outputs.version_name }}
            **Build Date:** ${{ github.run_started_at }}
            
            ### 📦 Assets
            - **APK**: Android application package for sideloading
            - **AAB**: Android App Bundle for Play Store distribution
            - **checksums.txt**: SHA256 checksums for verification
            
            ### 🔍 Verification
            To verify the integrity of downloaded files, use:
            ```bash
            sha256sum -c checksums.txt
            ```

  notify:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: [release, publish-release]
    if: always() && needs.release.result == 'success'
    timeout-minutes: 5

    steps:
      - name: Notify success
        if: needs.publish-release.result == 'success'
        run: |
          echo "✅ Release ${{ needs.release.outputs.tag }} published successfully!"
          echo "Tag: ${{ needs.release.outputs.tag }}"
          echo "Version: ${{ needs.release.outputs.version_name }}"

      - name: Notify failure
        if: needs.publish-release.result == 'failure'
        run: |
          echo "❌ Release ${{ needs.release.outputs.tag }} build succeeded but publishing failed!"
          echo "Check the publish-release job for details."
          exit 1